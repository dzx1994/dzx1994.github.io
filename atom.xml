<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BugsDeveloper</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-02-21T06:46:21.330Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Sean Dong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android中优雅地使用反射</title>
    <link href="http://yoursite.com/2017/02/17/Reflection-in-Android/"/>
    <id>http://yoursite.com/2017/02/17/Reflection-in-Android/</id>
    <published>2017-02-17T08:32:31.000Z</published>
    <updated>2017-02-21T06:46:21.330Z</updated>
    
    <content type="html"><![CDATA[<p><strong>反射简介：</strong></p>
<p>官方定义：反射主要是指程序可以访问、检测和修改它本身状态或行为的一种能力。在计算机科学领域，反射是一类应用，它们能够自描述和自控制。这类应用通过某种机制来实现对自己行为的描述和检测，并能根据自身行为的状态和结果，调整或修改应用所描述行为的状态和相关的语义。</p>
<p>功能：<br>1.在运行时判断任意一个对象所属的类。<br>2.在运行时构造任意一个类的对象。<br>3.在运行时判断任意一个类所具有的成员变量和方法。<br>4.在运行时调用任意一个对象的方法。</p>
<p>反射的常用类和函数:Class，Object, Constructor，Field，Method, Modifier；<br>其中Class-类对象，Constructor－类的构造器对象，Field－类的属性对象，Method－类的方法对象。</p>
<blockquote>
<p><strong>Class获取类对象的常用方法</strong>：</p>
</blockquote>
<pre><code>getClass() -- 每一个Class都有此函数
Class.getSuperClass() -- 返回父类的类对象
Class.forName() -- 静态方法，通过类的名称获取这个类的对象
.class -- 通过组件获取该组件所属类的对象
</code></pre><blockquote>
<p><strong>Constructor获取构造器的常用方法</strong>：</p>
</blockquote>
<pre><code>Constructor getConstructor(Class[] params) -- 根据构造函数的参数，返回一个具体的具有public属性的构造函数
Constructor[] getConstructors() -- 返回所有具有public属性的构造函数数组
Constructor getDeclaredConstructor(Class[] params) -- 根据构造函数的参数，返回一个具体的构造函数（不分public和非public属性）
Constructor[] getDeclaredConstructors() -- 返回该类中所有的构造函数数组（不分public和非public属性）
</code></pre><blockquote>
<p><strong>Field获取字段的常用方法</strong>：</p>
</blockquote>
<pre><code>Field getField(String name) -- 根据方法名和参数，返回一个具体的具有public属性的方法
Field[] getFields() -- 返回所有具有public属性的方法数组
Field getDeclaredField(String name) -- 根据方法名和参数，返回一个具体的方法（不分public和非public属性）
Field[] getDeclaredFields() -- 返回该类中的所有的方法数组（不分public和非public属性）
</code></pre><blockquote>
<p><strong>Method获得方法的常用方法</strong>：</p>
</blockquote>
<pre><code>Method getMethod(String name, Class[] params) -- 使用特定的参数类型，获得命名的公共方法 
Method[] getMethods() -- 用于获取类的所有的public修饰域的成员方法，包括从父类继承的public方法和实现接口的public方法； 
Method getDeclaredMethod(String name, Class[] params) -- 用于获取在当前类中定义的所有的成员方法和实现的接口方法，不包括从父类继承的方法。
Method[] getDeclaredMethods() -- 获得类声明的所有方法
</code></pre><p>类CLASS、METHOD、CONSTRUCTOR、FIELD都有一个PUBLIC方法INT GETMODIFIERS()。该方法返回一个INT类型的数，表示被修饰对象（ CLASS、 METHOD、 CONSTRUCTOR、 FIELD ）的修饰类型的组合值。</p>
<p><strong>反射在Android中的应用：</strong></p>
<ol>
<li><p>利用反射调用官方隐藏的API：</p>
<p>例如：通过反射来控制Toast的显示时间（Toast的hide方法是隐藏的）：</p>
<p> public class MyToast{<br> Context context= null;<br> Object obj = null;</p>
<pre><code>public MyToast(Context context,String text){
this.context =context;
Toast toast =Toast.makeText(context, text,1);
try{
</code></pre><p>  Field field = toast.getClass().getDeclaredField(“mTN”);<br>  field.setAccessible(true);<br>  obj =field.get(toast);</p>
<pre><code>}catch(Exception e) { 
 e.printStackTrace();
</code></pre><p>  }<br> }<br> public void show(){<br> try{<br>   //android4.0以上就要以下处理<br>   Field mNextViewField=obj.getClass().getDeclaredField(“mNextView”);<br>   mNextViewField.setAccessible(true);<br>   LayoutInflater inflate = (LayoutInflater) context.getSystemService</p>
<pre><code>(Context.LAYOUT_INFLATER_SERVICE);
</code></pre><p>   View v = inflate.inflate(R.layout.ui_toast, null); </p>
<pre><code>mNextViewField.set(obj, v);
</code></pre><p>   Method method =obj.getClass().getDeclaredMethod(“show”,null);<br>   method.invoke(obj,null);<br>  }catch(Exception e) {  </p>
<pre><code>e.printStackTrace();
</code></pre><p>  }<br> }<br>  public void hide(){<br>  try{<br>   Method method =obj.getClass().getDeclaredMethod(“hide”,null);<br>   method.invoke(obj,null);<br>   }catch (Exception e) {<br>   e.printStackTrace();<br>   }</p>
<pre><code>}
</code></pre><p> }</p>
</li>
</ol>
<p>2.class对象动态生成，这个搭配java的属性文件来实现：</p>
<p>  例如接口的多实现:</p>
<pre><code> 在assets文件夹中新建一个`xxx.properties`属性文件，

    Properties prop = new Properties();
    InputStream fis = Context.getAssets().open(&quot;xxx.properties&quot;);        
    prop.load(fis);
    String value = prop.getProperty(&quot;key&quot;);

xxx.properties文件格式如下：
   key=value

 最后Class.forName(value).newInstance()；就可得到对象。
</code></pre><p>3.通过反射机制获取泛型类型：</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;反射简介：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;官方定义：反射主要是指程序可以访问、检测和修改它本身状态或行为的一种能力。在计算机科学领域，反射是一类应用，它们能够自描述和自控制。这类应用通过某种机制来实现对自己行为的描述和检测，并能根据自身行为的状态和结果，调
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Reflection" scheme="http://yoursite.com/tags/Reflection/"/>
    
  </entry>
  
  <entry>
    <title>SeanDong&#39;s 2017</title>
    <link href="http://yoursite.com/2017/02/06/SeanDong&#39;s%202017/"/>
    <id>http://yoursite.com/2017/02/06/SeanDong&#39;s 2017/</id>
    <published>2017-02-06T08:13:30.000Z</published>
    <updated>2017-02-15T10:28:27.150Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p>
<p>2017年（开工）的第一篇博客，也是用Github Pages写的第一篇博客。也算是换种方式和风格来写博客，之前博客都是在CSDN写，风格就像记笔记一样，内容也是大杂烩，google一搜一大把。之前CSDN写的博客就让它自生自灭吧。</p>
<p><strong>回顾2016</strong></p>
<p>2016年7月正式踏入社会，带着对未来的憧憬南下深圳，第一份工作很顺利，但也很坑，一家上市公司的分公司，入职后发现居然类似于外包公司，做完一个项目就say goodbye了，第二份工作找的比较认真，最后一家做大数据的初创公司吸引了我，我的职责是开发一款强大的数据采集App兼Android逆向开发和App破解。</p>
<blockquote>
<p>2016的遗憾：</p>
</blockquote>
<p>错过了校招，但是金子总会发光；没有处理好生活和工作的关系，2017加以改正；没有一场说走就走的旅行。</p>
<p><strong>展望2017</strong></p>
<blockquote>
<p>博客：</p>
</blockquote>
<p>认真对待博客，运营一个微信公众号。微信文章，个人博客同步更新，每周一更，文章争取全部原创，文章内容主要为以下几点：</p>
<ul>
<li>技术要点为google搜索不到或者不全</li>
<li>主要为Android相关的技术文章</li>
<li>自己开发中的一些经验的分享</li>
<li>一些好的资源的推荐</li>
</ul>
<blockquote>
<p>工作：</p>
</blockquote>
<p>全身心投入工作中，学会一日三省；写出star 200+的开源项目；撸定python；多总结，交流。</p>
<blockquote>
<p>生活：</p>
</blockquote>
<p>一周不少于三次健身；至少一场旅游；学会处理生活琐事。</p>
<blockquote>
<p>最最最重要的：</p>
</blockquote>
<p>认认真真经营好和我女朋友的感情。              </p>
<blockquote>
<p> 欢迎关注我的微信公众号 BugsDeveloper，第一时间获取文章更新以及更多原创干货分享！</p>
<p>   <img src="http://i.imgur.com/dOUqOLG.jpg" alt=""></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2017年（开工）的第一篇博客，也是用Github Pages写的第一篇博客。也算是换种方式和风格来写博客，之前博客都是在CSDN写，风格就像记笔记一样，内容也是大杂烩，google一搜一大把。之前CSDN写的博客就让它
    
    </summary>
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
    
      <category term="plan" scheme="http://yoursite.com/tags/plan/"/>
    
  </entry>
  
</feed>
