<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BugsDeveloper</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-23T11:50:46.252Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Sean Dong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NanoHTTPD 简易 Http 服务器源码解读</title>
    <link href="http://yoursite.com/2017/03/15/NanoHTTPD-Source-detailed/"/>
    <id>http://yoursite.com/2017/03/15/NanoHTTPD-Source-detailed/</id>
    <published>2017-03-15T10:35:36.000Z</published>
    <updated>2017-03-23T11:50:46.252Z</updated>
    
    <content type="html"><![CDATA[<p>最近工作项目中碰到需要在 Android 客户端中搭建一个服务器的需求，一般来说都是 Android 客户端请求服务器数据进行解析然后渲染。这种需求也是第一次遇到。经查阅有一个简易的 HTTP 服务器 NanoHTTPD，只有一个类文件。就像去瞧瞧，结果发现这个类里面有20+个内部类和接口。看了源代码之后，对 HTTP 服务器的理解也更加深入了。<a href="https://github.com/NanoHttpd/nanohttpd" target="_blank" rel="external">源代码</a></p>
<h1 id="NanoHTTPD-服务器的请求流程图"><a href="#NanoHTTPD-服务器的请求流程图" class="headerlink" title="NanoHTTPD 服务器的请求流程图"></a>NanoHTTPD 服务器的请求流程图</h1><p><img src="http://i.imgur.com/xez0S2d.jpg" alt=""></p>
<p><font color="red"> 图上3中不同颜色的箭头，分别代表三种线程。</font>&gt;<br><a id="more"></a></p>
<ol>
<li><p>首先通过继承NanoHTTPD 类，自定义一个服务器启动的main入口，接下来继承NanoHTTPD里面的serve(HttpSession)方法 实现自定义的请求处理。  </p>
</li>
<li><p>服务器启动之后，会简历一个监听线程(ServerRunnable),在这个线程内部监听 ServerScoket的连接。如果有客户端连接，就为每一个连接分配一个线程去处理连接请求。在这个连接线程里面，取得inputstream，和outputstream。  </p>
</li>
<li><p>然后新建HttpSession对象，调用HttpSession对象的execute()方法,  在ClientHandler里面就用循环不断的监听接受到的这个Socket关闭了没有。  </p>
</li>
<li><p>HttpSession对象然后根据inputstream里面的值，读取请求行，请求头，读完之后这两部分之后，就调用自定义的serve()方法调用解析请求body，</p>
</li>
<li><p>解析完body之后就需要返回Response,最后利用response里面的输出流，将返回的数据输出到 当前的Socket连接里面。最后就由浏览器来解析数据了。  </p>
</li>
<li><p>将输出流，socket流，clienthandler线程依次关闭。完成一个处理</p>
</li>
</ol>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="NanoHTTPD-start-timeout-deamo-方法"><a href="#NanoHTTPD-start-timeout-deamo-方法" class="headerlink" title="NanoHTTPD.start(timeout,deamo)方法"></a>NanoHTTPD.start(timeout,deamo)方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> timeout, <span class="keyword">boolean</span> daemon)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">       <span class="keyword">this</span>.myServerSocket = <span class="keyword">this</span>.getServerSocketFactory().create();</div><div class="line">       <span class="comment">//  该选项用来决定如果网络上仍然有数据向旧的ServerSocket传输数据，</span></div><div class="line">       <span class="comment">// 是否允许新的ServerSocket绑定到与旧的ServerSocket同样的端口上，</span></div><div class="line">       <span class="comment">// 该选项的默认值与操作系统有关，在某些操作系统中，允许重用端口，而在某些系统中不允许重用端口。</span></div><div class="line"></div><div class="line">       <span class="comment">//当ServerSocket关闭时，如果网络上还有发送到这个serversocket上的数据，</span></div><div class="line">       <span class="comment">// 这个ServerSocket不会立即释放本地端口，而是等待一段时间，确保接收到了网络上发送过来的延迟数据，然后再释放端口</span></div><div class="line"></div><div class="line">       <span class="comment">//值得注意的是，该方法必须在ServerSocket还没有绑定到一个本地端口之前使用，</span></div><div class="line">       <span class="comment">// 否则执行该方法无效。此外，两个公用同一个端口的进程必须都调用serverSocket.setReuseAddress(true)方法，</span></div><div class="line">       <span class="comment">// 才能使得一个进程关闭ServerSocket之后，另一个进程的ServerSocket还能够立刻重用相同的端口</span></div><div class="line">       <span class="keyword">this</span>.myServerSocket.setReuseAddress(<span class="keyword">true</span>);<span class="comment">//绑定端口是否可以重用</span></div><div class="line"></div><div class="line"></div><div class="line">       <span class="comment">//绑定ServerSocket,返回一个可执行的Server线程</span></div><div class="line">       ServerRunnable serverRunnable = createServerRunnable(timeout);</div><div class="line"></div><div class="line">       <span class="comment">//将返回的ServerRunable 绑定到线程上。这个线程就是监听线程</span></div><div class="line">       <span class="keyword">this</span>.myThread = <span class="keyword">new</span> Thread(serverRunnable);</div><div class="line">       <span class="comment">//是否设置设置为守护线程</span></div><div class="line">       <span class="keyword">this</span>.myThread.setDaemon(daemon);</div><div class="line">       <span class="comment">//设置线程名字</span></div><div class="line">       <span class="keyword">this</span>.myThread.setName(<span class="string">"NanoHttpd Main Listener"</span>);</div><div class="line">       <span class="comment">//然后启动监听线程</span></div><div class="line">       <span class="keyword">this</span>.myThread.start();</div><div class="line"></div><div class="line">       <span class="comment">//TODO：main线程就隔一段时间判断监听线程是否出错了，出错了就跑出异常</span></div><div class="line">       <span class="keyword">while</span> (!serverRunnable.hasBinded &amp;&amp; serverRunnable.bindException == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               Thread.sleep(<span class="number">10L</span>);</div><div class="line">           &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">               <span class="comment">// on android this may not be allowed, that's why we</span></div><div class="line">               <span class="comment">// catch throwable the wait should be very short because we are</span></div><div class="line">               <span class="comment">// just waiting for the bind of the socket</span></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (serverRunnable.bindException != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">throw</span> serverRunnable.bindException;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="监听线程（ServerRunnable）类"><a href="#监听线程（ServerRunnable）类" class="headerlink" title="监听线程（ServerRunnable）类"></a>监听线程（ServerRunnable）类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">       <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> timeout;</div><div class="line"></div><div class="line">       <span class="keyword">private</span> IOException bindException;</div><div class="line"></div><div class="line">       <span class="keyword">private</span> <span class="keyword">boolean</span> hasBinded = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">private</span> <span class="title">ServerRunnable</span><span class="params">(<span class="keyword">int</span> timeout)</span> </span>&#123;</div><div class="line">           <span class="keyword">this</span>.timeout = timeout;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               myServerSocket.bind(hostname != <span class="keyword">null</span> ? <span class="keyword">new</span> InetSocketAddress(hostname, myPort) : <span class="keyword">new</span> InetSocketAddress(myPort));</div><div class="line">               hasBinded = <span class="keyword">true</span>;</div><div class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">               <span class="keyword">this</span>.bindException = e;</div><div class="line">               <span class="keyword">return</span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">do</span> &#123;</div><div class="line">               <span class="keyword">try</span> &#123;</div><div class="line">                   <span class="keyword">final</span> Socket finalAccept = NanoHTTPD.<span class="keyword">this</span>.myServerSocket.accept();</div><div class="line">                   <span class="keyword">if</span> (<span class="keyword">this</span>.timeout &gt; <span class="number">0</span>) &#123;</div><div class="line">                       finalAccept.setSoTimeout(<span class="keyword">this</span>.timeout);<span class="comment">//设置两次连接之间的，</span></div><div class="line">                       <span class="comment">// 如果ServerSocket等待超过这个时间，从accept处返回。</span></div><div class="line">                   &#125;</div><div class="line">                   <span class="keyword">final</span> InputStream inputStream = finalAccept.getInputStream();</div><div class="line">                   <span class="comment">//启动ClientHandler线程</span></div><div class="line">                   NanoHTTPD.<span class="keyword">this</span>.asyncRunner.exec(createClientHandler(finalAccept, inputStream));</div><div class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                   NanoHTTPD.LOG.log(Level.FINE, <span class="string">"Communication with the client broken"</span>, e);</div><div class="line">               &#125;</div><div class="line">           &#125; <span class="keyword">while</span> (!NanoHTTPD.<span class="keyword">this</span>.myServerSocket.isClosed());</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="DefaultAsyncRunner类"><a href="#DefaultAsyncRunner类" class="headerlink" title="DefaultAsyncRunner类"></a>DefaultAsyncRunner类</h2><p>做这个类就是为了提供一个可插拔的策略，可以统计当前的连接数，方便管理连接等<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultAsyncRunner</span> <span class="keyword">implements</span> <span class="title">AsyncRunner</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> requestCount;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ClientHandler&gt; running = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;NanoHTTPD.ClientHandler&gt;());</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@return</span> a list with currently running clients.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;ClientHandler&gt; <span class="title">getRunning</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> running;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeAll</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// copy of the list for concurrency</span></div><div class="line">        <span class="keyword">for</span> (ClientHandler clientHandler : <span class="keyword">new</span> ArrayList&lt;ClientHandler&gt;(<span class="keyword">this</span>.running)) &#123;</div><div class="line">            clientHandler.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//感觉源码里面，没有在这里减去requestCount</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closed</span><span class="params">(ClientHandler clientHandler)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.running.remove(clientHandler);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">(ClientHandler clientHandler)</span> </span>&#123;</div><div class="line">        ++<span class="keyword">this</span>.requestCount;</div><div class="line">        Thread t = <span class="keyword">new</span> Thread(clientHandler);</div><div class="line">        t.setDaemon(<span class="keyword">true</span>);</div><div class="line">        t.setName(<span class="string">"NanoHttpd Request Processor (#"</span> + <span class="keyword">this</span>.requestCount + <span class="string">")"</span>);</div><div class="line">        <span class="keyword">this</span>.running.add(clientHandler);</div><div class="line">        <span class="comment">//这里才是真正的启动客户连接处理线程</span></div><div class="line">        t.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="ClientHandler-线程"><a href="#ClientHandler-线程" class="headerlink" title="ClientHandler 线程"></a>ClientHandler 线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 对应着每一个新的客户端连接的线程,线程里面有对应的当前连接的输入流，和取得的Socket连接对象，同时还取得了输出流</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientHandler</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> InputStream inputStream;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Socket acceptSocket;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ClientHandler</span><span class="params">(InputStream inputStream, Socket acceptSocket)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.inputStream = inputStream;</div><div class="line">        <span class="keyword">this</span>.acceptSocket = acceptSocket;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</div><div class="line">        safeClose(<span class="keyword">this</span>.inputStream);</div><div class="line">        safeClose(<span class="keyword">this</span>.acceptSocket);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        OutputStream outputStream = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//得到当前连接的输出流</span></div><div class="line">            outputStream = <span class="keyword">this</span>.acceptSocket.getOutputStream();</div><div class="line">            <span class="comment">//创建临时文件管理器</span></div><div class="line">            TempFileManager tempFileManager = NanoHTTPD.<span class="keyword">this</span>.tempFileManagerFactory.create();</div><div class="line">            <span class="comment">//---------------创建了当前连接对应的  session对象，---------------线程私有的。</span></div><div class="line">            HTTPSession session = <span class="keyword">new</span> HTTPSession(tempFileManager, <span class="keyword">this</span>.inputStream, outputStream, <span class="keyword">this</span>.acceptSocket.getInetAddress());</div><div class="line">            <span class="keyword">while</span> (!<span class="keyword">this</span>.acceptSocket.isClosed()) &#123;</div><div class="line">                <span class="comment">//调用session对象的execute方法，取得请求行，请求头等信息。</span></div><div class="line">                session.execute();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="comment">// When the socket is closed by the client,</span></div><div class="line">            <span class="comment">// we throw our own SocketException</span></div><div class="line">            <span class="comment">// to break the "keep alive" loop above. If</span></div><div class="line">            <span class="comment">// the exception was anything other</span></div><div class="line">            <span class="comment">// than the expected SocketException OR a</span></div><div class="line">            <span class="comment">// SocketTimeoutException, print the</span></div><div class="line">            <span class="comment">// stacktrace</span></div><div class="line">            <span class="keyword">if</span> (!(e <span class="keyword">instanceof</span> SocketException &amp;&amp; <span class="string">"NanoHttpd Shutdown"</span>.equals(e.getMessage())) &amp;&amp; !(e <span class="keyword">instanceof</span> SocketTimeoutException)) &#123;</div><div class="line">                NanoHTTPD.LOG.log(Level.SEVERE, <span class="string">"Communication with the client broken, or an bug in the handler code"</span>, e);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            safeClose(outputStream);</div><div class="line">            safeClose(<span class="keyword">this</span>.inputStream);</div><div class="line">            safeClose(<span class="keyword">this</span>.acceptSocket);</div><div class="line">            NanoHTTPD.<span class="keyword">this</span>.asyncRunner.closed(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="httpsession-execute-方法"><a href="#httpsession-execute-方法" class="headerlink" title="httpsession.execute()方法"></a>httpsession.execute()方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">            Response r = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">// Read the first 8192 bytes. 读取第一个8192字节</span></div><div class="line">                <span class="comment">// The full header should fit in here.</span></div><div class="line">                <span class="comment">// Apache's default header limit is 8KB.</span></div><div class="line">                <span class="comment">// Do NOT assume that a single read will get the entire header</span></div><div class="line">                <span class="comment">// at once!</span></div><div class="line">                <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[HTTPSession.BUFSIZE];</div><div class="line">                <span class="keyword">this</span>.splitbyte = <span class="number">0</span>;</div><div class="line">                <span class="keyword">this</span>.rlen = <span class="number">0</span>;</div><div class="line"></div><div class="line">                <span class="keyword">int</span> read = -<span class="number">1</span>;</div><div class="line">                <span class="keyword">this</span>.inputStream.mark(HTTPSession.BUFSIZE);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="comment">//开始读取输入流里面的数据</span></div><div class="line">                    read = <span class="keyword">this</span>.inputStream.read(buf, <span class="number">0</span>, HTTPSession.BUFSIZE);</div><div class="line">                &#125; <span class="keyword">catch</span> (SSLException e) &#123;</div><div class="line">                    <span class="keyword">throw</span> e;</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    safeClose(<span class="keyword">this</span>.inputStream);</div><div class="line">                    safeClose(<span class="keyword">this</span>.outputStream);</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> SocketException(<span class="string">"NanoHttpd Shutdown"</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//上面的代码没读出来，</span></div><div class="line">                <span class="keyword">if</span> (read == -<span class="number">1</span>) &#123;</div><div class="line">                    <span class="comment">// socket was been closed</span></div><div class="line">                    safeClose(<span class="keyword">this</span>.inputStream);</div><div class="line">                    safeClose(<span class="keyword">this</span>.outputStream);</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> SocketException(<span class="string">"NanoHttpd Shutdown"</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//</span></div><div class="line">                <span class="keyword">while</span> (read &gt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">this</span>.rlen += read;</div><div class="line">                    <span class="keyword">this</span>.splitbyte = findHeaderEnd(buf, <span class="keyword">this</span>.rlen);<span class="comment">//多少个字节开始，出现header和body的分隔</span></div><div class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.splitbyte &gt; <span class="number">0</span>) &#123;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    read = <span class="keyword">this</span>.inputStream.read(buf, <span class="keyword">this</span>.rlen, HTTPSession.BUFSIZE - <span class="keyword">this</span>.rlen);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.splitbyte &lt; <span class="keyword">this</span>.rlen) &#123;</div><div class="line">                    <span class="keyword">this</span>.inputStream.reset();</div><div class="line">                    <span class="keyword">this</span>.inputStream.skip(<span class="keyword">this</span>.splitbyte);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">//设置parms 属性,params就是url中 ？后面跟的东西</span></div><div class="line">                <span class="keyword">this</span>.parms = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">                <span class="comment">//确保header为空</span></div><div class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == <span class="keyword">this</span>.headers) &#123;</div><div class="line">                    <span class="keyword">this</span>.headers = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">this</span>.headers.clear();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// C创建BufferReader解析 Header</span></div><div class="line">                BufferedReader hin = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> ByteArrayInputStream(buf, <span class="number">0</span>, <span class="keyword">this</span>.rlen)));</div><div class="line"></div><div class="line">                <span class="comment">// 解析头部</span></div><div class="line">                Map&lt;String, String&gt; pre = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">                decodeHeader(hin, pre, <span class="keyword">this</span>.parms, <span class="keyword">this</span>.headers);</div><div class="line"></div><div class="line">                <span class="comment">//添加远程主机信息</span></div><div class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != <span class="keyword">this</span>.remoteIp) &#123;</div><div class="line">                    <span class="keyword">this</span>.headers.put(<span class="string">"remote-addr"</span>, <span class="keyword">this</span>.remoteIp);</div><div class="line">                    <span class="keyword">this</span>.headers.put(<span class="string">"http-client-ip"</span>, <span class="keyword">this</span>.remoteIp);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">//方法字符串转化为对象</span></div><div class="line">                <span class="keyword">this</span>.method = Method.lookup(pre.get(<span class="string">"method"</span>));</div><div class="line">                <span class="comment">//请求的方法不能为空</span></div><div class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.method == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ResponseException(Response.Status.BAD_REQUEST, <span class="string">"BAD REQUEST: Syntax error. HTTP verb "</span> + pre.get(<span class="string">"method"</span>) + <span class="string">" unhandled."</span>);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">this</span>.uri = pre.get(<span class="string">"uri"</span>);</div><div class="line">                <span class="comment">//新疆一个Cookies处理器，持有头部信息</span></div><div class="line">                <span class="keyword">this</span>.cookies = <span class="keyword">new</span> CookieHandler(<span class="keyword">this</span>.headers);</div><div class="line"></div><div class="line">                <span class="comment">//判断连接类型，长连接还是短连接</span></div><div class="line">                String connection = <span class="keyword">this</span>.headers.get(<span class="string">"connection"</span>);</div><div class="line">                <span class="keyword">boolean</span> keepAlive = <span class="string">"HTTP/1.1"</span>.equals(protocolVersion) &amp;&amp; (connection == <span class="keyword">null</span> || !connection.matches(<span class="string">"(?i).*close.*"</span>));</div><div class="line"></div><div class="line">                <span class="comment">// Ok, now do the serve()</span></div><div class="line">                <span class="comment">// (requires implementation for totalRead())</span></div><div class="line">                <span class="comment">// 请求行，和请求头都解析出来了，去处理业务逻辑，并且给出返回Response对象</span></div><div class="line">                r = serve(<span class="keyword">this</span>);</div><div class="line">                <span class="comment">// <span class="doctag">TODO:</span> this.inputStream.skip(body_size -</span></div><div class="line">                <span class="comment">// (this.inputStream.totalRead() - pos_before_serve))</span></div><div class="line"></div><div class="line">                <span class="comment">//开始返回Response, 如果返回的响应为空</span></div><div class="line">                <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ResponseException(Response.Status.INTERNAL_ERROR, <span class="string">"SERVER INTERNAL ERROR: Serve() returned a null response."</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">//设置返回的响应内容的编码方式</span></div><div class="line">                    String acceptEncoding = <span class="keyword">this</span>.headers.get(<span class="string">"accept-encoding"</span>);</div><div class="line">                    <span class="keyword">this</span>.cookies.unloadQueue(r);</div><div class="line">                    r.setRequestMethod(<span class="keyword">this</span>.method);</div><div class="line">                    r.setGzipEncoding(useGzipWhenAccepted(r) &amp;&amp; acceptEncoding != <span class="keyword">null</span> &amp;&amp; acceptEncoding.contains(<span class="string">"gzip"</span>));</div><div class="line">                    r.setKeepAlive(keepAlive);</div><div class="line">                    <span class="comment">//之后调用response的发送方法，将数据发送出去了。</span></div><div class="line">                    r.send(<span class="keyword">this</span>.outputStream);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//如果不是长连接</span></div><div class="line">                <span class="keyword">if</span> (!keepAlive || r.isCloseConnection()) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> SocketException(<span class="string">"NanoHttpd Shutdown"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (SocketException e) &#123;</div><div class="line">                <span class="comment">// throw it out to close socket object (finalAccept)</span></div><div class="line">                <span class="keyword">throw</span> e;</div><div class="line">            &#125; <span class="keyword">catch</span> (SocketTimeoutException ste) &#123;</div><div class="line">                <span class="comment">// treat socket timeouts the same way we treat socket exceptions</span></div><div class="line">                <span class="comment">// i.e. close the stream &amp; finalAccept object by throwing the</span></div><div class="line">                <span class="comment">// exception up the call stack.</span></div><div class="line">                <span class="keyword">throw</span> ste;</div><div class="line">            &#125; <span class="keyword">catch</span> (SSLException ssle) &#123;</div><div class="line">                Response resp = newFixedLengthResponse(Response.Status.INTERNAL_ERROR, NanoHTTPD.MIME_PLAINTEXT, <span class="string">"SSL PROTOCOL FAILURE: "</span> + ssle.getMessage());</div><div class="line">                resp.send(<span class="keyword">this</span>.outputStream);</div><div class="line">                safeClose(<span class="keyword">this</span>.outputStream);</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</div><div class="line">                Response resp = newFixedLengthResponse(Response.Status.INTERNAL_ERROR, NanoHTTPD.MIME_PLAINTEXT, <span class="string">"SERVER INTERNAL ERROR: IOException: "</span> + ioe.getMessage());</div><div class="line">                resp.send(<span class="keyword">this</span>.outputStream);</div><div class="line">                safeClose(<span class="keyword">this</span>.outputStream);</div><div class="line">            &#125; <span class="keyword">catch</span> (ResponseException re) &#123;</div><div class="line">                Response resp = newFixedLengthResponse(re.getStatus(), NanoHTTPD.MIME_PLAINTEXT, re.getMessage());</div><div class="line">                resp.send(<span class="keyword">this</span>.outputStream);</div><div class="line">                safeClose(<span class="keyword">this</span>.outputStream);</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                <span class="comment">//最后关闭Response, 清除零时文件管理器</span></div><div class="line">                safeClose(r);</div><div class="line">                <span class="keyword">this</span>.tempFileManager.clear();</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h2 id="serve-httpsession-方法"><a href="#serve-httpsession-方法" class="headerlink" title="serve(httpsession )方法"></a>serve(httpsession )方法</h2><p>参数里面的hettpsession其实已经经过了请求行，和请求头的解析，只需要覆盖server方法里面，在里面解析请求body，处理我们自己的业务逻辑，比如说是post形式表单，那么表单数据在请求body里面,根据表单数据内容，返回响应的response对象，</p>
<h2 id="HelloService重载的serve-方法"><a href="#HelloService重载的serve-方法" class="headerlink" title="HelloService重载的serve()方法"></a>HelloService重载的serve()方法</h2><p>不过这个这个重载的方法没有调用解析请求body的方法，他只是简单的返回一个response对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> Response <span class="title">serve</span><span class="params">(IHTTPSession session)</span> </span>&#123;</div><div class="line">       Method method = session.getMethod();</div><div class="line">       String uri = session.getUri();</div><div class="line">       HelloServer.LOG.info(method + <span class="string">" '"</span> + uri + <span class="string">"' "</span>);</div><div class="line"></div><div class="line">       String msg = <span class="string">"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello server&lt;/h1&gt;\n"</span>;</div><div class="line">       Map&lt;String, String&gt; parms = session.getParms();</div><div class="line">       <span class="keyword">if</span> (parms.get(<span class="string">"username"</span>) == <span class="keyword">null</span>) &#123;</div><div class="line">           msg += <span class="string">"&lt;form action='?' method='get'&gt;\n"</span> + <span class="string">"  &lt;p&gt;Your name: &lt;input type='text' name='username'&gt;&lt;/p&gt;\n"</span> + <span class="string">"&lt;/form&gt;\n"</span>;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           msg += <span class="string">"&lt;p&gt;Hello, "</span> + parms.get(<span class="string">"username"</span>) + <span class="string">"!&lt;/p&gt;"</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       msg += <span class="string">"&lt;/body&gt;&lt;/html&gt;\n"</span>;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> newFixedLengthResponse(msg);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h2 id="session-的-parseBody-方法"><a href="#session-的-parseBody-方法" class="headerlink" title="session 的 parseBody()方法"></a>session 的 parseBody()方法</h2><p>把所有请求体里面的内容，解析好，存放在files里面<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseBody</span><span class="params">(Map&lt;String, String&gt; files)</span> <span class="keyword">throws</span> IOException, ResponseException </span>&#123;</div><div class="line">            RandomAccessFile randomAccessFile = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">long</span> size = getBodySize(); <span class="comment">//返回请求body有多大</span></div><div class="line">                ByteArrayOutputStream baos = <span class="keyword">null</span>;</div><div class="line">                DataOutput requestDataOutput = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">                <span class="comment">// Store the request in memory or a file, depending on size</span></div><div class="line">                <span class="comment">//根据文件大小，决定吧这个请求存在内存中还是文件中</span></div><div class="line">                <span class="keyword">if</span> (size &lt; MEMORY_STORE_LIMIT) &#123;</div><div class="line">                    baos = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">                    requestDataOutput = <span class="keyword">new</span> DataOutputStream(baos);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">//得到一个随机访问的文件</span></div><div class="line">                    randomAccessFile = getTmpBucket();</div><div class="line">                    requestDataOutput = randomAccessFile;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// Read all the body and write it to request_data_output</span></div><div class="line">                <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[REQUEST_BUFFER_LEN];</div><div class="line">                <span class="keyword">while</span> (<span class="keyword">this</span>.rlen &gt;= <span class="number">0</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">this</span>.rlen = <span class="keyword">this</span>.inputStream.read(buf, <span class="number">0</span>, (<span class="keyword">int</span>) Math.min(size, REQUEST_BUFFER_LEN));</div><div class="line">                    size -= <span class="keyword">this</span>.rlen;</div><div class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.rlen &gt; <span class="number">0</span>) &#123;</div><div class="line">                        requestDataOutput.write(buf, <span class="number">0</span>, <span class="keyword">this</span>.rlen);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                ByteBuffer fbuf = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">if</span> (baos != <span class="keyword">null</span>) &#123;</div><div class="line">                    fbuf = ByteBuffer.wrap(baos.toByteArray(), <span class="number">0</span>, baos.size());</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    fbuf = randomAccessFile.getChannel().map(FileChannel.MapMode.READ_ONLY, <span class="number">0</span>, randomAccessFile.length());</div><div class="line">                    randomAccessFile.seek(<span class="number">0</span>);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// If the method is POST, there may be parameters</span></div><div class="line">                <span class="comment">// in data section, too, read it:</span></div><div class="line">                <span class="keyword">if</span> (Method.POST.equals(<span class="keyword">this</span>.method)) &#123;</div><div class="line">                    ContentType contentType = <span class="keyword">new</span> ContentType(<span class="keyword">this</span>.headers.get(<span class="string">"content-type"</span>));</div><div class="line">                    <span class="keyword">if</span> (contentType.isMultipart()) &#123;</div><div class="line">                        String boundary = contentType.getBoundary();</div><div class="line">                        <span class="keyword">if</span> (boundary == <span class="keyword">null</span>) &#123;</div><div class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> ResponseException(Response.Status.BAD_REQUEST,</div><div class="line">                                    <span class="string">"BAD REQUEST: Content type is multipart/form-data but boundary missing. Usage: GET /example/file.html"</span>);</div><div class="line">                        &#125;</div><div class="line">                        decodeMultipartFormData(contentType, fbuf, <span class="keyword">this</span>.parms, files);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">byte</span>[] postBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[fbuf.remaining()];</div><div class="line">                        fbuf.get(postBytes);</div><div class="line">                        String postLine = <span class="keyword">new</span> String(postBytes, contentType.getEncoding()).trim();</div><div class="line">                        <span class="comment">// Handle application/x-www-form-urlencoded</span></div><div class="line">                        <span class="keyword">if</span> (<span class="string">"application/x-www-form-urlencoded"</span>.equalsIgnoreCase(contentType.getContentType())) &#123;</div><div class="line">                            decodeParms(postLine, <span class="keyword">this</span>.parms);</div><div class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (postLine.length() != <span class="number">0</span>) &#123;</div><div class="line">                            <span class="comment">// Special case for raw POST data =&gt; create a</span></div><div class="line">                            <span class="comment">// special files entry "postData" with raw content</span></div><div class="line">                            <span class="comment">// data</span></div><div class="line">                            files.put(<span class="string">"postData"</span>, postLine);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Method.PUT.equals(<span class="keyword">this</span>.method)) &#123;</div><div class="line">                    files.put(<span class="string">"content"</span>, saveTmpFile(fbuf, <span class="number">0</span>, fbuf.limit(), <span class="keyword">null</span>));</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                safeClose(randomAccessFile);</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<h2 id="返回的response-对象的send-方法"><a href="#返回的response-对象的send-方法" class="headerlink" title="返回的response 对象的send()方法"></a>返回的response 对象的send()方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">        * 发送给定的响应到Socket</div><div class="line">        */</div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(OutputStream outputStream)</span> </span>&#123;</div><div class="line">           SimpleDateFormat gmtFrmt = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"E, d MMM yyyy HH:mm:ss 'GMT'"</span>, Locale.US);</div><div class="line">           gmtFrmt.setTimeZone(TimeZone.getTimeZone(<span class="string">"GMT"</span>));</div><div class="line"></div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               <span class="keyword">if</span> (<span class="keyword">this</span>.status == <span class="keyword">null</span>) &#123;</div><div class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"sendResponse(): Status can't be null."</span>);</div><div class="line">               &#125;</div><div class="line">               PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(outputStream, <span class="keyword">new</span> ContentType(<span class="keyword">this</span>.mimeType).getEncoding())), <span class="keyword">false</span>);</div><div class="line">               pw.append(<span class="string">"HTTP/1.1 "</span>).append(<span class="keyword">this</span>.status.getDescription()).append(<span class="string">" \r\n"</span>);</div><div class="line">               <span class="keyword">if</span> (<span class="keyword">this</span>.mimeType != <span class="keyword">null</span>) &#123;</div><div class="line">                   printHeader(pw, <span class="string">"Content-Type"</span>, <span class="keyword">this</span>.mimeType);</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">if</span> (getHeader(<span class="string">"date"</span>) == <span class="keyword">null</span>) &#123;</div><div class="line">                   printHeader(pw, <span class="string">"Date"</span>, gmtFrmt.format(<span class="keyword">new</span> Date()));</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : <span class="keyword">this</span>.header.entrySet()) &#123;</div><div class="line">                   printHeader(pw, entry.getKey(), entry.getValue());</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">if</span> (getHeader(<span class="string">"connection"</span>) == <span class="keyword">null</span>) &#123;</div><div class="line">                   printHeader(pw, <span class="string">"Connection"</span>, (<span class="keyword">this</span>.keepAlive ? <span class="string">"keep-alive"</span> : <span class="string">"close"</span>));</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">if</span> (getHeader(<span class="string">"content-length"</span>) != <span class="keyword">null</span>) &#123;</div><div class="line">                   encodeAsGzip = <span class="keyword">false</span>;</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">if</span> (encodeAsGzip) &#123;</div><div class="line">                   printHeader(pw, <span class="string">"Content-Encoding"</span>, <span class="string">"gzip"</span>);</div><div class="line">                   setChunkedTransfer(<span class="keyword">true</span>);</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">long</span> pending = <span class="keyword">this</span>.data != <span class="keyword">null</span> ? <span class="keyword">this</span>.contentLength : <span class="number">0</span>;</div><div class="line">               <span class="keyword">if</span> (<span class="keyword">this</span>.requestMethod != Method.HEAD &amp;&amp; <span class="keyword">this</span>.chunkedTransfer) &#123;</div><div class="line">                   printHeader(pw, <span class="string">"Transfer-Encoding"</span>, <span class="string">"chunked"</span>);</div><div class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!encodeAsGzip) &#123;</div><div class="line">                   pending = sendContentLengthHeaderIfNotAlreadyPresent(pw, pending);</div><div class="line">               &#125;</div><div class="line">               pw.append(<span class="string">"\r\n"</span>);</div><div class="line">               <span class="comment">//像样子是想输出响应行和响应头，再输出响应body,//发送响应body</span></div><div class="line">               pw.flush();</div><div class="line">               sendBodyWithCorrectTransferAndEncoding(outputStream, pending);</div><div class="line">               outputStream.flush();</div><div class="line">               <span class="comment">//客户端已经显示了传输的数据了</span></div><div class="line">               safeClose(<span class="keyword">this</span>.data);</div><div class="line">           &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</div><div class="line">               NanoHTTPD.LOG.log(Level.SEVERE, <span class="string">"Could not send response to the client"</span>, ioe);</div><div class="line">           &#125;</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<p>接下来就是关闭流，关闭socket，关闭线程的工作了。</p>
<p>现在看的还比较浅显，至于里面在解析请求头，请求行，请求体的时候的注意事项，编码方式，chunkedTransfer传输都了解的不深，接下来好好看一下。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近工作项目中碰到需要在 Android 客户端中搭建一个服务器的需求，一般来说都是 Android 客户端请求服务器数据进行解析然后渲染。这种需求也是第一次遇到。经查阅有一个简易的 HTTP 服务器 NanoHTTPD，只有一个类文件。就像去瞧瞧，结果发现这个类里面有20+个内部类和接口。看了源代码之后，对 HTTP 服务器的理解也更加深入了。&lt;a href=&quot;https://github.com/NanoHttpd/nanohttpd&quot;&gt;源代码&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;NanoHTTPD-服务器的请求流程图&quot;&gt;&lt;a href=&quot;#NanoHTTPD-服务器的请求流程图&quot; class=&quot;headerlink&quot; title=&quot;NanoHTTPD 服务器的请求流程图&quot;&gt;&lt;/a&gt;NanoHTTPD 服务器的请求流程图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/xez0S2d.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;red&quot;&gt; 图上3中不同颜色的箭头，分别代表三种线程。&lt;/font&gt;&amp;gt;&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="NanoHTTPD" scheme="http://yoursite.com/tags/NanoHTTPD/"/>
    
  </entry>
  
  <entry>
    <title>Android 如何保证应用一直拥有Root权限 </title>
    <link href="http://yoursite.com/2017/03/14/Android-Root/"/>
    <id>http://yoursite.com/2017/03/14/Android-Root/</id>
    <published>2017-03-14T10:57:05.000Z</published>
    <updated>2017-03-15T10:46:23.460Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p>
<p>在项目的过程中，有可能会要实现类似360优化大师、安卓优化大师的软件搬家、静默安装等需要 root 权限的功能，关于 Android Root，之后会出详细文章进行介绍。但是如何让一个一直应用拥有 Root 权限呢？</p>
<p><strong>Android 应用请求 Root 权限</strong></p>
<pre><code>`Process process = Runtime.getRuntime().exec(&quot;su&quot;);`
</code></pre><p>一行代码就够了，但是这样做就可以了吗…..肯定没这么简单啦！当执行需要系统权限的操作时，系统还是回去检查应用程序是否拥有该权限。<br>所以我们要想办法绕过过系统检查权限这道关卡！但是市面上对大多数应用都没有对这进行处理，就连360都没有，上 stackoverflow 搜了一圈空手而归，突然发现按键精灵 APK 能一直拥有 Root 权限，他是通过执行 Shell 命令输入 echo “rootOK”，进行 Hook Root权限。我们模拟用 ADB Shell进行命令，控制板返回 OK，之后 Root 权限一直存在。接下来讲讲如何代码进行 输入 ADB Shell 命令。</p>
<p><strong>代码控制 ABD Shell 命令</strong></p>
<pre><code>/**
 * request root permission
 */
private void requestRoot() {
    try {
        this.mProcess = Runtime.getRuntime().exec(&quot;su \n&quot;);
        this.mOutput = this.mProcess.getOutputStream();
        this.mOutput.write(&quot;echo \&quot;rootOK\&quot;\n&quot;.getBytes());
        this.mOutput.flush();
    } catch (IOException e) {
        e.printStackTrace();
    }
}
</code></pre><p>显示请求并 Hook Root权限。</p>
<pre><code>/**
 * execute shell cmd
 *
 * @param command shell command
 */
public void execute(String command) {
    try {
        this.mOutput.write(command.getBytes());
        this.mOutput.flush();
    } catch (IOException e) {
        e.printStackTrace();
    }
}
</code></pre><p>执行 ADB Shell 命令其实就是获取Root之后的进程输出流，然后通过输出流传递 ADB Shell 命令。</p>
<p><strong>Hook Root 权限关键代码</strong></p>
<pre><code>this.mOutput.write(&quot;echo \&quot;rootOK\&quot;\n&quot;.getBytes());
</code></pre><p>我在 Gayhub 上传了 Root 获取和执行 Shell 命令的工具类，欢迎下载<a href="https://github.com/dzx1994/RootShell" target="_blank" rel="external">https://github.com/dzx1994/RootShell</a></p>
<blockquote>
<p> 欢迎关注我的微信公众号 BugsDeveloper，第一时间获取文章更新以及更多原创干货分享！</p>
<p>   <img src="http://i.imgur.com/dOUqOLG.jpg" alt=""></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在项目的过程中，有可能会要实现类似360优化大师、安卓优化大师的软件搬家、静默安装等需要 root 权限的功能，关于 Android Root，之后会出详细文章进行介绍。但是如何让一个一直应用拥有 Root 权限呢？&lt;/
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Root" scheme="http://yoursite.com/tags/Root/"/>
    
  </entry>
  
  <entry>
    <title>如何系统地记住 ADB 命令</title>
    <link href="http://yoursite.com/2017/03/06/How-to-systematically-remember-ADB-commands/"/>
    <id>http://yoursite.com/2017/03/06/How-to-systematically-remember-ADB-commands/</id>
    <published>2017-03-06T09:25:08.000Z</published>
    <updated>2017-03-14T10:51:30.863Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p>
<p>说到 ADB 大家应该都不陌生，即 Android Debug Bridge，Android调试桥，身为 Android 开发的我们，熟练使用 ADB 命令将会大大提升我们的开发效率，但是 ADB 的命令有很多又很杂感觉有点杂乱无章，从小学起老师就叮嘱我们要有方法的去学习，今天就来总结下我是怎么系统地去记 ADB 命令。</p>
<p><strong>ADB 分类</strong></p>
<p>我把 ADB 命令分为两大类：</p>
<ul>
<li><p>ADB 基本命令</p>
</li>
<li><p>ADB Shell 命令</p>
</li>
</ul>
<p><img src="http://i.imgur.com/q8c9caD.png" alt=""></p>
<p>ADB Shell 命令又分为：</p>
<ul>
<li>ps（Process Status）</li>
<li>am（Activity Manager）</li>
<li>pm（Packeger Mabager）</li>
<li>top</li>
<li>input</li>
<li>getprop/setprop</li>
<li>dumpsys</li>
</ul>
<p><img src="http://i.imgur.com/sPbcagX.png" alt=""></p>
<p><strong>ADB 基本命令详解</strong></p>
<blockquote>
<p><strong>ADB 一些常用的基本命令就不详细例举了，相信大家也都铭记于心，网上一搜也一大把，我就来说说经常被开发者们忽略的：</strong></p>
</blockquote>
<pre><code>adb shutdown     关闭设备  
adb root         获取root权限 （前提是手机已经root过）
adb remount      重新挂载系统分区，使系统分区重新可写（前提是 adb root 成功，要想操作system必须执行这一步）
adb logcat -v/d/i/w/e &lt;fomat&gt; &lt;file path&gt;    ps: v/d/i/w/e 分别为Verbose/Debug/Info/Warning/Error； fomat输出格式，主要使用的格式为time输出。 例如：adb logcat -v time C:\Users\Sean\log.txt
adb reboot bootloader 重启到fastboot模式
adb reboot recovery   重启到recovery模式
adb sideload          使用更新包更新系统
</code></pre><p><strong>ADB Shell 命令详解</strong></p>
<p>我们都是知道Android是基于Linux内核，ADB Shell 其实就是进入了Linux环境，所以在ADB Shell 命令下能够运行一些常见的Linux命令，例如：ls cat date cp rm pwd mount chmod …. 想必这些命令大家都已经熟能生巧了。</p>
<blockquote>
<p><strong>pm（package manager）</strong></p>
</blockquote>
<p>  如其名字一样，包管理器，用此命令可以查询所有有关包的信息<br><img src="http://i.imgur.com/HsW9Dto.png" alt=""></p>
<blockquote>
<p><strong>am（Activity）</strong></p>
</blockquote>
<p> Activity管理器，你能使用am去模拟各种系统的行为，例如去启动一个activity，强制停止进程，发送广播进程，修改设备屏幕属性等等。</p>
<p><img src="http://i.imgur.com/0GZNXQ5.png" alt=""></p>
<blockquote>
<p><strong>ps 这是一个linux命令（process state）</strong></p>
</blockquote>
<p>linux一个查看进程的命令，看以查看当前进程的状态，经常使用ps | grep + packagename 进行查看应用的进程状态。</p>
<blockquote>
<p><strong>top</strong></p>
</blockquote>
<p>top命令提供了实时的对系统处理器的状态监视.它将显示系统中CPU最“敏感”的任务列表.该命令可以按CPU使用.内存使用和执行时间对任务进行排序<br>详情可查看<a href="http://blog.csdn.net/liuhu767/article/details/53442807" title="http://blog.csdn.net/liuhu767/article/details/53442807" target="_blank" rel="external">http://blog.csdn.net/liuhu767/article/details/53442807</a>这篇博客。</p>
<blockquote>
<p><strong>input</strong></p>
</blockquote>
<p>模拟事件（按键/输入），例如 点击，滑动 输入文本等等</p>
<blockquote>
<p><strong>getprop/setprop</strong></p>
</blockquote>
<p>查看属性 </p>
<p><img src="http://i.imgur.com/pE0zxDF.png" alt=""></p>
<blockquote>
<p><strong>dumpsys</strong></p>
</blockquote>
<p>dumpsys命令功能很强大，能dump系统服务的各种状态，非常有必要熟悉该命令的用法以及含义，其具体的用法<a href="http://gityuan.com/2016/05/14/dumpsys-command/" target="_blank" rel="external">http://gityuan.com/2016/05/14/dumpsys-command/</a>这篇博客介绍的很详细。</p>
<p><strong>总结</strong><br> 其实 ADB 命令记住的技巧很简单，就是把它进行分类去进行记忆，然后理解每个类别的含义这样下次你想用ADB 命令感谢什么，你只要联想到相关类别就行了。</p>
<blockquote>
<p> 欢迎关注我的微信公众号 BugsDeveloper，第一时间获取文章更新以及更多原创干货分享！</p>
<p>   <img src="http://i.imgur.com/dOUqOLG.jpg" alt=""></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说到 ADB 大家应该都不陌生，即 Android Debug Bridge，Android调试桥，身为 Android 开发的我们，熟练使用 ADB 命令将会大大提升我们的开发效率，但是 ADB 的命令有很多又很杂感觉
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="ADB" scheme="http://yoursite.com/tags/ADB/"/>
    
  </entry>
  
  <entry>
    <title>Redis数据库如何嵌入到Android中</title>
    <link href="http://yoursite.com/2017/02/23/Redis-in-Android/"/>
    <id>http://yoursite.com/2017/02/23/Redis-in-Android/</id>
    <published>2017-02-23T10:39:54.000Z</published>
    <updated>2017-03-03T02:03:38.935Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Reids简介：</strong></p>
<p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。<br>Redis 与其他 key - value 缓存产品有以下三个特点：</p>
<ul>
<li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li>
<li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li>
<li>Redis支持数据的备份，即master-slave模式的数据备份。</li>
</ul>
<p><strong>Redis优势</strong></p>
<ul>
<li>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li>
<li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li>
<li>原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。</li>
<li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li>
</ul>
<p><strong>Redis与其他key-value存储有什么不同？</strong></p>
<ul>
<li>Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。</li>
<li>Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。</li>
</ul>
<blockquote>
<p><strong>关于更多有关redis的信息以及其操作移步<a href="https://redis.io/" title="https://redis.io/" target="_blank" rel="external">https://redis.io/</a>（要慢慢学会看英文文档）</strong></p>
</blockquote>
<p><strong>Redis在Android中的应用</strong></p>
<p>网上关于Reids在Android中的应用的介绍几乎没有（Reids 后端开发中应用比较广泛），但不排除小伙伴们会使用reids进行存储（大部分是公司内部应用），接下来就来看看在Android中怎么去使用Redis。</p>
<blockquote>
<p><strong>先来看看Redis的服务端和客户端是怎么交互的</strong></p>
</blockquote>
<p>  Redis服务器是典型的一对多服务器程序，通过使用由IO多路复用技术实现的文件事件处理器，Redis服务器使用单线程单进程的方式来处理命令请求，并与多个客户端进行网络通信。</p>
<p>  Redis客户端与服务器之间通过TCP协议进行通信。TCP协议是一种流式协议（TCP是基于Socket通信），数据以字节流的形式进行传递，没有固有的”报文”或”报文边界”的概念，如果需要设置边界，需要应用层自行处理。<br>  因此，Redis客户端与服务器之间的交互数据，都按照Redis自定义的统一请求协议的格式进行编码。使用这种协议，每条命令之间都有了“边界”。</p>
<p>举个例子，如果客户端要向服务器发送以下命令请求：</p>
<pre><code>`SET msg “helloworld”`
</code></pre><p>   那么客户端实际发送的数据是：</p>
<pre><code>*`3\r\n$3\r\nSET\r\n$3\r\nmsg\r\n$11\r\nhelloworld\r\n`
</code></pre><p>   服务器收到这样的数据时，就可以通过解析”*3”得到该命令有3个参数，第一个参数长度为3，值为”SET”，也就是要执行的命令；第二个参数长度为3，值为”msg”；第三个参数长度为11，值为”hello world”。<br>   这样就得到了一条完整的命令，解析并处理该命令后，接着解析下一条命令。</p>
<blockquote>
<p><strong>接下来来踩坑</strong></p>
</blockquote>
<p>   Reids的API中有Java语言的主要有Jedis和Redisson，我先用Redisson撸了一遍，尴尬的是连编译都通不过，可是Redisson官网上清清楚楚写着支持Android</p>
<p>   <img src="http://i.imgur.com/EUSokd7.png" alt=""></p>
<p>马上上gayhub上和作者交流了一番，原来Redisson只是理论上支持Android，作者没有真实测试过，由于Redisson关联的第三方包太多了，耦合性太高了，带来了很多未知的坑，作者建议我用Jedis，感兴趣的可以去踩踩坑。</p>
<blockquote>
<p><strong>使用Jedis</strong></p>
</blockquote>
<p>Jedis就友好多了，一次编译通过运行：</p>
<pre><code>Jedis mJedis = new Jedis(HOST, PORT);
mJedis.auth(PASSWORD);
</code></pre><p>两行代码拿到Jedis，接下来就可以随意操作数据库了。但没过两分钟Jedis就报<code>JedisConnectionException： Read timed out</code>，WTF，上Gayhub一看，原来Jedis维护了一个JedisPool，能比较好的解决这个问题，马上撸：</p>
<pre><code>public class RedisAPI {

private static JedisPool pool = null;

public static JedisPool getPool() {
    if (pool == null) {
        JedisPoolConfig config = new JedisPoolConfig();
        // 控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取；
        // 如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。
        config.setMaxActive(500);
        // 控制一个pool最多有多少个状态为idle(空闲的)的jedis实例。
        config.setMaxIdle(5);
        // 表示当borrow(引入)一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException；
        config.setMaxWait(1000 * 100);
        // 在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的；
        config.setTestOnBorrow(true);
        pool = new JedisPool(config, HOST, POST);
    }
    return pool;
}

// 返还到连接池

public static void returnResource(JedisPool pool, Jedis redis) {
    if (redis != null) {
        pool.returnResource(redis);
    }
}

// 获取数据

public static String get(String key) {
    String value = null;

    JedisPool pool = null;
    Jedis jedis = null;
    try {
        pool = getPool();
        jedis = pool.getResource();
        value = jedis.get(key);
    } catch (Exception e) {
        // 释放redis对象
        pool.returnBrokenResource(jedis);
        e.printStackTrace();
    } finally {
        // 返还到连接池
        returnResource(pool, jedis);
    }

    return value;
  }
}
</code></pre><p>这样就应该没事了吧，可是，编译通过了，运行就崩了，报<code>NoClassDefFoundError：java.lang.management.ManagementFactory</code>，说是引用的类在类路径中没有找到<code>java.lang.management.ManagementFactory</code>，咱们来看看<code>java.lang.management.ManagementFactory</code>是何方圣神。<br><img src="http://i.imgur.com/4XxPZWH.png" alt=""></p>
<p>原来如此，是用来管理和监控JVM的，可是Android编译使用Dalvik，Android API中已经把这个类的干掉了，此路不通另寻他路。我们都知道Redis是对内存进行操作，速度应该都在毫秒级，这是我们通常的认识，所以当对Redis操作出现几秒的超时时间，你能想象吗？我们还是先分析一下Jedis的源代码吧，以sadd操作为例：</p>
<pre><code>public Long sadd(final String key, final String... members) {
checkIsInMulti();
client.sadd(key, members);
return client.getIntegerReply();
}
</code></pre><p>client是<code>redis.clients.jedis.Client.java</code>的实例，继承关系如下：</p>
<pre><code>public class Client extends BinaryClient implements Commands；
public class BinaryClient extends Connection；
</code></pre><p>Connection包装了对Redis server的Socket操作，命令写操作通过<code>socket.getOutputStream()</code>输出流将命令信息发送到Redis server，当写完命令后要通过<code>socket.getInputStream()</code>的到的输入流将<br>命令执行结果返回，这中间必然会有一个命令执行到结果返回的延时时间，这就是一个Jedis调用Redis命令操作所用的时间。需要说明的是，Redis server是单线程执行所有连接发送过来的命令的，也就是说不管并发中有多少个client在发送命令，Redis-server端是单线程处理的，并按照默认的FIFO方式处理请求，这个可在redis.conf配置文件中配置。关于Redis server的详细运行机制参见：<a href="http://redis.io/documentation" title="http://redis.io/documentation" target="_blank" rel="external">http://redis.io/documentation</a>所以<code>client.sadd(key, members)</code>;调用完后只是将命令信息发送到了Redis server端，具体有没有执行要看Redis server的负载情况。然后，通过<code>client.getIntegerReply()</code>;等待（time out)返回结果。</p>
<p>Connection初始化Socket时有多种选择，其中设置socket time out 的方法如下：</p>
<pre><code>  public void rollbackTimeout() {
      try {

 socket.setSoTimeout(timeout);

 socket.setKeepAlive(false);
      } catch (SocketException ex) {

throw new JedisException(ex);
      }
  }
</code></pre><p>由<code>redis.clients.jedis.Protocol.DEFAULT_TIMEOUT = 2000</code> 我们知道默认的超时时间是2秒，这个时间相对于redis操作内存毫秒级的速度来说已经很长，那我们为什么还会遇到<br><code>java.net.SocketTimeoutException: Read timed out</code>异常呢？Redis操作内存虽然平均毫秒级的，但当数据量很大时未必都如此快速。在我的开发过程中就遇到过一个集合到了千万级数据量，一次操作超时时间在秒级是很正常的，而且机器性能很好的情况下已经如此，更何况我们本机开发的机器相对于生产服务器来说速度会更慢了。所以在初始化JedisPool时应该根据实际情况通合理设置连接参数，通过Jedis构造方法，合理设置Socket读取输入InputStream的超时时间：</p>
<pre><code>Jedis mJedis = new Jedis(HOST, PORT, TIMEOUT);
</code></pre><p>注意第三个参数time out，设置成我们能容忍的超时时间，单位是毫秒。但不知道为什么既然单位是毫秒，为什么参数类型是int而不是long。</p>
<p>设置第三个参数后，我在四千万数据量集合上操作最多一次大概超时5秒，问题基本解决。</p>
<blockquote>
<p><strong>总结</strong></p>
</blockquote>
<p>Reids在Android中的使用率很低，但不排除小伙伴们有这个需求，Jedis和Redisson对Android的支持都不是和友好，通过阅读源码才把坑填掉。希望能给有需求的小伙伴带来帮助。</p>
<blockquote>
<p> 欢迎关注我的微信公众号 BugsDeveloper，第一时间获取文章更新以及更多原创干货分享！</p>
<p>   <img src="http://i.imgur.com/dOUqOLG.jpg" alt=""></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Reids简介：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。&lt;br&gt;Redis 与其他 key - value 缓存产品有以下三个特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redis支持数据
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Reids" scheme="http://yoursite.com/tags/Reids/"/>
    
  </entry>
  
  <entry>
    <title>Android中优雅地使用反射</title>
    <link href="http://yoursite.com/2017/02/17/Reflection-in-Android/"/>
    <id>http://yoursite.com/2017/02/17/Reflection-in-Android/</id>
    <published>2017-02-17T08:32:31.000Z</published>
    <updated>2017-02-21T09:05:19.974Z</updated>
    
    <content type="html"><![CDATA[<p><strong>反射简介：</strong></p>
<p>官方定义：反射主要是指程序可以访问、检测和修改它本身状态或行为的一种能力。在计算机科学领域，反射是一类应用，它们能够自描述和自控制。这类应用通过某种机制来实现对自己行为的描述和检测，并能根据自身行为的状态和结果，调整或修改应用所描述行为的状态和相关的语义。</p>
<p>功能：<br>1.在运行时判断任意一个对象所属的类。<br>2.在运行时构造任意一个类的对象。<br>3.在运行时判断任意一个类所具有的成员变量和方法。<br>4.在运行时调用任意一个对象的方法。</p>
<p>反射的常用类和函数:Class，Object, Constructor，Field，Method, Modifier；<br>其中Class-类对象，Constructor－类的构造器对象，Field－类的属性对象，Method－类的方法对象。</p>
<blockquote>
<p><strong>Class获取类对象的常用方法</strong>：</p>
</blockquote>
<pre><code>getClass() -- 每一个Class都有此函数
Class.getSuperClass() -- 返回父类的类对象
Class.forName() -- 静态方法，通过类的名称获取这个类的对象
.class -- 通过组件获取该组件所属类的对象
</code></pre><blockquote>
<p><strong>Constructor获取构造器的常用方法</strong>：</p>
</blockquote>
<pre><code>Constructor getConstructor(Class[] params) -- 根据构造函数的参数，返回一个具体的具有public属性的构造函数
Constructor[] getConstructors() -- 返回所有具有public属性的构造函数数组
Constructor getDeclaredConstructor(Class[] params) -- 根据构造函数的参数，返回一个具体的构造函数（不分public和非public属性）
Constructor[] getDeclaredConstructors() -- 返回该类中所有的构造函数数组（不分public和非public属性）
</code></pre><blockquote>
<p><strong>Field获取字段的常用方法</strong>：</p>
</blockquote>
<pre><code>Field getField(String name) -- 根据方法名和参数，返回一个具体的具有public属性的方法
Field[] getFields() -- 返回所有具有public属性的方法数组
Field getDeclaredField(String name) -- 根据方法名和参数，返回一个具体的方法（不分public和非public属性）
Field[] getDeclaredFields() -- 返回该类中的所有的方法数组（不分public和非public属性）
</code></pre><blockquote>
<p><strong>Method获得方法的常用方法</strong>：</p>
</blockquote>
<pre><code>Method getMethod(String name, Class[] params) -- 使用特定的参数类型，获得命名的公共方法 
Method[] getMethods() -- 用于获取类的所有的public修饰域的成员方法，包括从父类继承的public方法和实现接口的public方法； 
Method getDeclaredMethod(String name, Class[] params) -- 用于获取在当前类中定义的所有的成员方法和实现的接口方法，不包括从父类继承的方法。
Method[] getDeclaredMethods() -- 获得类声明的所有方法
</code></pre><p>类CLASS、METHOD、CONSTRUCTOR、FIELD都有一个PUBLIC方法INT GETMODIFIERS()。该方法返回一个INT类型的数，表示被修饰对象（ CLASS、 METHOD、 CONSTRUCTOR、 FIELD ）的修饰类型的组合值。</p>
<p><strong>反射在Android中的应用：</strong></p>
<ol>
<li><p>利用反射调用官方隐藏的API：</p>
<p>例如：通过反射来控制Toast的显示时间（Toast的hide方法是隐藏的）：</p>
<pre><code> public class MyToast {
    Context context = null;
    Object obj = null;

    public MyToast(Context context, String text) {
        this.context = context;
        Toast toast = Toast.makeText(context, text, 1);
        try {
            Field field = toast.getClass().getDeclaredField(&quot;mTN&quot;);
            field.setAccessible(true);
            obj = field.get(toast);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void show() {
        try {
            // android4.0以上就要以下处理
            Field mNextViewField = obj.getClass().getDeclaredField(&quot;mNextView&quot;);
            mNextViewField.setAccessible(true);
            LayoutInflater inflate = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            View v = inflate.inflate(R.layout.ui_toast, null);
            mNextViewField.set(obj, v);
            Method method = obj.getClass().getDeclaredMethod(&quot;show&quot;, null);
            method.invoke(obj, null);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void hide() {
        try {
            Method method = obj.getClass().getDeclaredMethod(&quot;hide&quot;, null);
            method.invoke(obj, null);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
</code></pre></li>
</ol>
<p>2.class对象动态生成，这个搭配java的属性文件来实现：</p>
<p>  例如接口的多实现:</p>
<pre><code> 在assets文件夹中新建一个`xxx.properties`属性文件，

    Properties prop = new Properties();
    InputStream fis = Context.getAssets().open(&quot;xxx.properties&quot;);        
    prop.load(fis);
    String value = prop.getProperty(&quot;key&quot;);

 xxx.properties文件格式如下：
   key=value

 最后Class.forName(value).newInstance()；就可得到对象。

**注意**Android assets和raw和res文件夹中的文件是只读的。
</code></pre><p>3.通过反射机制获取泛型类型：</p>
<p>  例如下面这种结构：</p>
<pre><code>// People类
public class People&lt;t&gt; {}
// PersonInterface接口
public interface PersonInterface&lt;t&gt; {}
// Person类继承People类
public class Person&lt;t&gt; extends People&lt;String&gt; implements PersonInterface&lt;Integer&gt; {}
</code></pre><p>  获取泛型类型：</p>
<pre><code>Person&lt;string&gt; person = new Person&lt;&gt;();
// 第一种方式 通过对象getClass方法
Class&lt;?&gt; class1 = person.getClass();
Type genericSuperclass = class1.getGenericSuperclass();// 获取class对象的直接超类的Type

Type[] interfaceTypes = class1.getGenericInterfaces();// 获取class对象的所有接口的Type集合

getComponentType(genericSuperclass);
getComponentType(interfaceTypes[0]);
</code></pre><p>  getComponentType方法的具体实现：</p>
<pre><code>private Class&lt;?&gt; getComponentType(Type type) {
    Class&lt;?&gt; componentType = null;
    if (type instanceof ParameterizedType) {
        // getActualTypeArguments()返回表示此类型实际类型参数的 Type 对象的数组。
        Type[] actualTypeArguments = ((ParameterizedType) type).getActualTypeArguments();
        if (actualTypeArguments != null &amp;&amp; actualTypeArguments.length &gt; 0) {
            componentType = (Class&lt;?&gt;) actualTypeArguments[0];
        }
    } else if (type instanceof GenericArrayType) {
        // 表示一种元素类型是参数化类型或者类型变量的数组类型
        componentType = (Class&lt;?&gt;) ((GenericArrayType) type).getGenericComponentType();
    } else {
        componentType = (Class&lt;?&gt;) type;
    }
    return componentType;
}
</code></pre><p>4.通过反射机制获取注解信息：</p>
<pre><code>try

{
    // 获取类中的所有方法
    Method method = class1.getDeclaredMethod();
    Annotation[] annotations1 = method.getAnnotations();// 获取所有的方法注解信息
    Annotation annotation1 = method.getAnnotation(RouterUri.class);// 获取指定的注解信息
    TypeVariable[] typeVariables1 = method.getTypeParameters();
    Annotation[][] parameterAnnotationsArray = method.getParameterAnnotations();// 拿到所有参数注解信息
    Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();// 获取所有参数class类型
    Type[] genericParameterTypes = method.getGenericParameterTypes();// 获取所有参数的type类型
    Class&lt;?&gt; returnType = method.getReturnType();// 获取方法的返回类型
    int modifiers = method.getModifiers();// 获取方法的访问权限
}catch(NoSuchMethodException e)
{
    e.printStackTrace();
}
</code></pre><p>5.Android反编译中的应用：</p>
<p>  例如有些应用为了防止做了二次打包签名校验，那我们如何进行二次打包呢？</p>
<blockquote>
<p>获取应用的签名方法是固定的：getPackageManager().getPackageInfo(getPackageName(), 64).signatures，我们可以直接修改应用的Application信息，通过反射机制，把校验对象的字符串内容设置到signatures中，说白了就是用反射来修改应用的签名信息，这样在应用中所有获取签名的地方都是我们设置的指定签名值，也就是比对的那个常量字符串内容，所有的签名校验方法都是返回true了。</p>
</blockquote>
<p>6.Android应用安全中的应用：</p>
<p>  例如Android在做签名校验防止二次打包时，绕过应用层的校验（花点心思就能破解了）。</p>
<blockquote>
<p>可以做的更安全点，就是在native层用反射调用系统获取签名的方法，然后直接在native层进行比较，如果发现签名不正确，就退出程序，全部放在native层做，这样安全系数会高点。</p>
</blockquote>
<p><strong>反射机制的优缺点：</strong></p>
<ul>
<li>优点：<br>运行期类型的判断，动态类加载，动态代理使用反射。</li>
<li>缺点：<br>性能是一个问题（特别是在手机这种低性能的机器上），反射相当于一系列解释操作，通知jvm要做的事情，性能比直接的java代码要慢很多。</li>
</ul>
<p><strong>总结：</strong></p>
<p>Java的反射机制在平时的业务开发过程中很少使用到，但是在一些基础框架（例如EventBus，Retrofit，Gson，Xposed）的搭建上应用非常广泛，今天简单的总结学习了一下，还有很多未知的知识等以后用到再做补充。</p>
<blockquote>
<p> 欢迎关注我的微信公众号 BugsDeveloper，第一时间获取文章更新以及更多原创干货分享！</p>
<p>   <img src="http://i.imgur.com/dOUqOLG.jpg" alt=""></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;反射简介：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;官方定义：反射主要是指程序可以访问、检测和修改它本身状态或行为的一种能力。在计算机科学领域，反射是一类应用，它们能够自描述和自控制。这类应用通过某种机制来实现对自己行为的描述和检测，并能根据自身行为的状态和结果，调
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Reflection" scheme="http://yoursite.com/tags/Reflection/"/>
    
  </entry>
  
  <entry>
    <title>SeanDong&#39;s 2017</title>
    <link href="http://yoursite.com/2017/02/06/SeanDong&#39;s%202017/"/>
    <id>http://yoursite.com/2017/02/06/SeanDong&#39;s 2017/</id>
    <published>2017-02-06T08:13:30.000Z</published>
    <updated>2017-02-15T10:28:27.150Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p>
<p>2017年（开工）的第一篇博客，也是用Github Pages写的第一篇博客。也算是换种方式和风格来写博客，之前博客都是在CSDN写，风格就像记笔记一样，内容也是大杂烩，google一搜一大把。之前CSDN写的博客就让它自生自灭吧。</p>
<p><strong>回顾2016</strong></p>
<p>2016年7月正式踏入社会，带着对未来的憧憬南下深圳，第一份工作很顺利，但也很坑，一家上市公司的分公司，入职后发现居然类似于外包公司，做完一个项目就say goodbye了，第二份工作找的比较认真，最后一家做大数据的初创公司吸引了我，我的职责是开发一款强大的数据采集App兼Android逆向开发和App破解。</p>
<blockquote>
<p>2016的遗憾：</p>
</blockquote>
<p>错过了校招，但是金子总会发光；没有处理好生活和工作的关系，2017加以改正；没有一场说走就走的旅行。</p>
<p><strong>展望2017</strong></p>
<blockquote>
<p>博客：</p>
</blockquote>
<p>认真对待博客，运营一个微信公众号。微信文章，个人博客同步更新，每周一更，文章争取全部原创，文章内容主要为以下几点：</p>
<ul>
<li>技术要点为google搜索不到或者不全</li>
<li>主要为Android相关的技术文章</li>
<li>自己开发中的一些经验的分享</li>
<li>一些好的资源的推荐</li>
</ul>
<blockquote>
<p>工作：</p>
</blockquote>
<p>全身心投入工作中，学会一日三省；写出star 200+的开源项目；撸定python；多总结，交流。</p>
<blockquote>
<p>生活：</p>
</blockquote>
<p>一周不少于三次健身；至少一场旅游；学会处理生活琐事。</p>
<blockquote>
<p>最最最重要的：</p>
</blockquote>
<p>认认真真经营好和我女朋友的感情。              </p>
<blockquote>
<p> 欢迎关注我的微信公众号 BugsDeveloper，第一时间获取文章更新以及更多原创干货分享！</p>
<p>   <img src="http://i.imgur.com/dOUqOLG.jpg" alt=""></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2017年（开工）的第一篇博客，也是用Github Pages写的第一篇博客。也算是换种方式和风格来写博客，之前博客都是在CSDN写，风格就像记笔记一样，内容也是大杂烩，google一搜一大把。之前CSDN写的博客就让它
    
    </summary>
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
    
      <category term="plan" scheme="http://yoursite.com/tags/plan/"/>
    
  </entry>
  
</feed>
