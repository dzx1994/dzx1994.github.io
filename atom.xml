<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BugsDeveloper</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-03T01:51:51.825Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Sean Dong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis数据库如何嵌入到Android中</title>
    <link href="http://yoursite.com/2017/02/23/Redis-in-Android/"/>
    <id>http://yoursite.com/2017/02/23/Redis-in-Android/</id>
    <published>2017-02-23T10:39:54.000Z</published>
    <updated>2017-03-03T01:51:51.825Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Reids简介：</strong></p>
<p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。<br>Redis 与其他 key - value 缓存产品有以下三个特点：</p>
<ul>
<li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li>
<li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li>
<li>Redis支持数据的备份，即master-slave模式的数据备份。</li>
</ul>
<p><strong>Redis优势</strong></p>
<ul>
<li>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li>
<li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li>
<li>原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。</li>
<li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li>
</ul>
<p><strong>Redis与其他key-value存储有什么不同？</strong></p>
<ul>
<li>Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。</li>
<li>Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。</li>
</ul>
<blockquote>
<p><strong>关于更多有关redis的信息以及其操作移步<a href="https://redis.io/" title="https://redis.io/" target="_blank" rel="external">https://redis.io/</a>（要慢慢学会看英文文档）</strong></p>
</blockquote>
<p><strong>Redis在Android中的应用</strong></p>
<p>网上关于Reids在Android中的应用的介绍几乎没有（Reids 后端开发中应用比较广泛），但不排除小伙伴们会使用reids进行存储（大部分是公司内部应用），接下来就来看看在Android中怎么去使用Redis。</p>
<blockquote>
<p><strong>先来看看Redis的服务端和客户端是怎么交互的</strong></p>
</blockquote>
<p>  Redis服务器是典型的一对多服务器程序，通过使用由IO多路复用技术实现的文件事件处理器，Redis服务器使用单线程单进程的方式来处理命令请求，并与多个客户端进行网络通信。</p>
<p>  Redis客户端与服务器之间通过TCP协议进行通信。TCP协议是一种流式协议（TCP是基于Socket通信），数据以字节流的形式进行传递，没有固有的”报文”或”报文边界”的概念，如果需要设置边界，需要应用层自行处理。<br>  因此，Redis客户端与服务器之间的交互数据，都按照Redis自定义的统一请求协议的格式进行编码。使用这种协议，每条命令之间都有了“边界”。</p>
<p>举个例子，如果客户端要向服务器发送以下命令请求：</p>
<pre><code>`SET msg “helloworld”`
</code></pre><p>   那么客户端实际发送的数据是：</p>
<pre><code>*`3\r\n$3\r\nSET\r\n$3\r\nmsg\r\n$11\r\nhelloworld\r\n`
</code></pre><p>   服务器收到这样的数据时，就可以通过解析”*3”得到该命令有3个参数，第一个参数长度为3，值为”SET”，也就是要执行的命令；第二个参数长度为3，值为”msg”；第三个参数长度为11，值为”hello world”。<br>   这样就得到了一条完整的命令，解析并处理该命令后，接着解析下一条命令。</p>
<blockquote>
<p><strong>接下来来踩坑</strong></p>
</blockquote>
<p>   Reids的API中有Java语言的主要有Jedis和Redisson，我先用Redisson撸了一遍，尴尬的是连编译都通不过，可是Redisson官网上清清楚楚写着支持Android</p>
<p>   <img src="http://i.imgur.com/EUSokd7.png" alt=""></p>
<p>马上上gayhub上和作者交流了一番，原来Redisson只是理论上支持Android，作者没有真实测试过，由于Redisson关联的第三方包太多了，耦合性太高了，带来了很多未知的坑，作者建议我用Jedis，感兴趣的可以去踩踩坑。</p>
<blockquote>
<p><strong>使用Jedis</strong></p>
</blockquote>
<p>Jedis就友好多了，一次编译通过运行：</p>
<pre><code>Jedis mJedis = new Jedis(HOST, PORT);
mJedis.auth(PASSWORD);
</code></pre><p>两行代码拿到Jedis，接下来就可以随意操作数据库了。但没过两分钟Jedis就报<code>JedisConnectionException： Read timed out</code>，WTF，上Gayhub一看，原来Jedis维护了一个JedisPool，能比较好的解决这个问题，马上撸：</p>
<pre><code>public class RedisAPI {

private static JedisPool pool = null;

public static JedisPool getPool() {
    if (pool == null) {
        JedisPoolConfig config = new JedisPoolConfig();
        // 控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取；
        // 如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。
        config.setMaxActive(500);
        // 控制一个pool最多有多少个状态为idle(空闲的)的jedis实例。
        config.setMaxIdle(5);
        // 表示当borrow(引入)一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException；
        config.setMaxWait(1000 * 100);
        // 在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的；
        config.setTestOnBorrow(true);
        pool = new JedisPool(config, HOST, POST);
    }
    return pool;
}

// 返还到连接池

public static void returnResource(JedisPool pool, Jedis redis) {
    if (redis != null) {
        pool.returnResource(redis);
    }
}

// 获取数据

public static String get(String key) {
    String value = null;

    JedisPool pool = null;
    Jedis jedis = null;
    try {
        pool = getPool();
        jedis = pool.getResource();
        value = jedis.get(key);
    } catch (Exception e) {
        // 释放redis对象
        pool.returnBrokenResource(jedis);
        e.printStackTrace();
    } finally {
        // 返还到连接池
        returnResource(pool, jedis);
    }

    return value;
  }
}
</code></pre><p>这样就应该没事了吧，可是，编译通过了，运行就崩了，报<code>NoClassDefFoundError：java.lang.management.ManagementFactory</code>，说是引用的类在类路径中没有找到<code>java.lang.management.ManagementFactory</code>，咱们来看看<code>java.lang.management.ManagementFactory</code>是何方圣神。<br><img src="http://i.imgur.com/4XxPZWH.png" alt=""></p>
<p>原来如此，是用来管理和监控JVM的，可是Android编译使用Dalvik，Android API中已经把这个类的干掉了，此路不通另寻他路。我们都知道Redis是对内存进行操作，速度应该都在毫秒级，这是我们通常的认识，所以当对Redis操作出现几秒的超时时间，你能想象吗？我们还是先分析一下Jedis的源代码吧，以sadd操作为例：</p>
<pre><code>public Long sadd(final String key, final String... members) {
checkIsInMulti();
client.sadd(key, members);
return client.getIntegerReply();
}
</code></pre><p>client是<code>redis.clients.jedis.Client.java</code>的实例，继承关系如下：</p>
<pre><code>public class Client extends BinaryClient implements Commands；
public class BinaryClient extends Connection；
</code></pre><p>Connection包装了对Redis server的socket操作，命令写操作通过<code>socket.getOutputStream()</code>输出流将命令信息发送到redis server，当写完命令后要通过<code>socket.getInputStream()</code>的到的输入流将<br>命令执行结果返回，这中间必然会有一个命令执行到结果返回的延时时间，这就是一个Jedis调用redis命令操作所用的时间。需要说明的是，Redis server是单线程执行所有连接发送过来的命令的，也就是说不管并发中有多少个client在发送命令，redis-server端是单线程处理的，并按照默认的FIFO方式处理请求，这个可在redis.conf配置文件中配置。关于redis server的详细运行机制参见：<a href="http://redis.io/documentation" title="http://redis.io/documentation" target="_blank" rel="external">http://redis.io/documentation</a>所以<code>client.sadd(key, members)</code>;调用完后只是将命令信息发送到了redis server端，具体有没有执行要看redis server的负载情况。然后，通过c<code>lient.getIntegerReply()</code>;等待（time out)返回结果。</p>
<p>Connection初始化socket时有多种选择，其中设置socket time out 的方法如下：</p>
<pre><code>  public void rollbackTimeout() {
      try {

 socket.setSoTimeout(timeout);

 socket.setKeepAlive(false);
      } catch (SocketException ex) {

throw new JedisException(ex);
      }
  }
</code></pre><p>由<code>redis.clients.jedis.Protocol.DEFAULT_TIMEOUT = 2000</code> 我们知道默认的超时时间是2秒，这个时间相对于redis操作内存毫秒级的速度来说已经很长，那我们为什么还会遇到<br><code>java.net.SocketTimeoutException: Read timed out</code>异常呢？redis操作内存虽然平均毫秒级的，但当数据量很大时未必都如此快速。在我的开发过程中就遇到过一个集合到了千万级数据量，一次操作超时时间在秒级是很正常的，而且机器性能很好的情况下已经如此，更何况我们本机开发的机器相对于生产服务器来说速度会更慢了。所以在初始化JedisPool时应该根据实际情况通合理设置连接参数，通过Jedis构造方法，合理设置socket读取输入InputStream的超时时间：</p>
<pre><code>Jedis mJedis = new Jedis(HOST, PORT, TIMEOUT);
</code></pre><p>注意第三个参数time out，设置成我们能容忍的超时时间，单位是毫秒。但不知道为什么既然单位是毫秒，为什么参数类型是int而不是long。</p>
<p>设置第三个参数后，我在四千万数据量集合上操作最多一次大概超时5秒，问题基本解决。</p>
<blockquote>
<p><strong>总结</strong></p>
</blockquote>
<p>Reids在Android中的使用率很低，但不排除小伙伴们有这个需求，Jedis和Redisson对Android的支持都不是和友好，通过阅读源码才把坑填掉。希望能给有需求的小伙伴带来帮助。</p>
<blockquote>
<p> 欢迎关注我的微信公众号 BugsDeveloper，第一时间获取文章更新以及更多原创干货分享！</p>
<p>   <img src="http://i.imgur.com/dOUqOLG.jpg" alt=""></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Reids简介：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。&lt;br&gt;Redis 与其他 key - value 缓存产品有以下三个特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redis支持数据
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Reids" scheme="http://yoursite.com/tags/Reids/"/>
    
  </entry>
  
  <entry>
    <title>Android中优雅地使用反射</title>
    <link href="http://yoursite.com/2017/02/17/Reflection-in-Android/"/>
    <id>http://yoursite.com/2017/02/17/Reflection-in-Android/</id>
    <published>2017-02-17T08:32:31.000Z</published>
    <updated>2017-02-21T09:05:19.974Z</updated>
    
    <content type="html"><![CDATA[<p><strong>反射简介：</strong></p>
<p>官方定义：反射主要是指程序可以访问、检测和修改它本身状态或行为的一种能力。在计算机科学领域，反射是一类应用，它们能够自描述和自控制。这类应用通过某种机制来实现对自己行为的描述和检测，并能根据自身行为的状态和结果，调整或修改应用所描述行为的状态和相关的语义。</p>
<p>功能：<br>1.在运行时判断任意一个对象所属的类。<br>2.在运行时构造任意一个类的对象。<br>3.在运行时判断任意一个类所具有的成员变量和方法。<br>4.在运行时调用任意一个对象的方法。</p>
<p>反射的常用类和函数:Class，Object, Constructor，Field，Method, Modifier；<br>其中Class-类对象，Constructor－类的构造器对象，Field－类的属性对象，Method－类的方法对象。</p>
<blockquote>
<p><strong>Class获取类对象的常用方法</strong>：</p>
</blockquote>
<pre><code>getClass() -- 每一个Class都有此函数
Class.getSuperClass() -- 返回父类的类对象
Class.forName() -- 静态方法，通过类的名称获取这个类的对象
.class -- 通过组件获取该组件所属类的对象
</code></pre><blockquote>
<p><strong>Constructor获取构造器的常用方法</strong>：</p>
</blockquote>
<pre><code>Constructor getConstructor(Class[] params) -- 根据构造函数的参数，返回一个具体的具有public属性的构造函数
Constructor[] getConstructors() -- 返回所有具有public属性的构造函数数组
Constructor getDeclaredConstructor(Class[] params) -- 根据构造函数的参数，返回一个具体的构造函数（不分public和非public属性）
Constructor[] getDeclaredConstructors() -- 返回该类中所有的构造函数数组（不分public和非public属性）
</code></pre><blockquote>
<p><strong>Field获取字段的常用方法</strong>：</p>
</blockquote>
<pre><code>Field getField(String name) -- 根据方法名和参数，返回一个具体的具有public属性的方法
Field[] getFields() -- 返回所有具有public属性的方法数组
Field getDeclaredField(String name) -- 根据方法名和参数，返回一个具体的方法（不分public和非public属性）
Field[] getDeclaredFields() -- 返回该类中的所有的方法数组（不分public和非public属性）
</code></pre><blockquote>
<p><strong>Method获得方法的常用方法</strong>：</p>
</blockquote>
<pre><code>Method getMethod(String name, Class[] params) -- 使用特定的参数类型，获得命名的公共方法 
Method[] getMethods() -- 用于获取类的所有的public修饰域的成员方法，包括从父类继承的public方法和实现接口的public方法； 
Method getDeclaredMethod(String name, Class[] params) -- 用于获取在当前类中定义的所有的成员方法和实现的接口方法，不包括从父类继承的方法。
Method[] getDeclaredMethods() -- 获得类声明的所有方法
</code></pre><p>类CLASS、METHOD、CONSTRUCTOR、FIELD都有一个PUBLIC方法INT GETMODIFIERS()。该方法返回一个INT类型的数，表示被修饰对象（ CLASS、 METHOD、 CONSTRUCTOR、 FIELD ）的修饰类型的组合值。</p>
<p><strong>反射在Android中的应用：</strong></p>
<ol>
<li><p>利用反射调用官方隐藏的API：</p>
<p>例如：通过反射来控制Toast的显示时间（Toast的hide方法是隐藏的）：</p>
<pre><code> public class MyToast {
    Context context = null;
    Object obj = null;

    public MyToast(Context context, String text) {
        this.context = context;
        Toast toast = Toast.makeText(context, text, 1);
        try {
            Field field = toast.getClass().getDeclaredField(&quot;mTN&quot;);
            field.setAccessible(true);
            obj = field.get(toast);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void show() {
        try {
            // android4.0以上就要以下处理
            Field mNextViewField = obj.getClass().getDeclaredField(&quot;mNextView&quot;);
            mNextViewField.setAccessible(true);
            LayoutInflater inflate = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            View v = inflate.inflate(R.layout.ui_toast, null);
            mNextViewField.set(obj, v);
            Method method = obj.getClass().getDeclaredMethod(&quot;show&quot;, null);
            method.invoke(obj, null);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void hide() {
        try {
            Method method = obj.getClass().getDeclaredMethod(&quot;hide&quot;, null);
            method.invoke(obj, null);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
</code></pre></li>
</ol>
<p>2.class对象动态生成，这个搭配java的属性文件来实现：</p>
<p>  例如接口的多实现:</p>
<pre><code> 在assets文件夹中新建一个`xxx.properties`属性文件，

    Properties prop = new Properties();
    InputStream fis = Context.getAssets().open(&quot;xxx.properties&quot;);        
    prop.load(fis);
    String value = prop.getProperty(&quot;key&quot;);

 xxx.properties文件格式如下：
   key=value

 最后Class.forName(value).newInstance()；就可得到对象。

**注意**Android assets和raw和res文件夹中的文件是只读的。
</code></pre><p>3.通过反射机制获取泛型类型：</p>
<p>  例如下面这种结构：</p>
<pre><code>// People类
public class People&lt;t&gt; {}
// PersonInterface接口
public interface PersonInterface&lt;t&gt; {}
// Person类继承People类
public class Person&lt;t&gt; extends People&lt;String&gt; implements PersonInterface&lt;Integer&gt; {}
</code></pre><p>  获取泛型类型：</p>
<pre><code>Person&lt;string&gt; person = new Person&lt;&gt;();
// 第一种方式 通过对象getClass方法
Class&lt;?&gt; class1 = person.getClass();
Type genericSuperclass = class1.getGenericSuperclass();// 获取class对象的直接超类的Type

Type[] interfaceTypes = class1.getGenericInterfaces();// 获取class对象的所有接口的Type集合

getComponentType(genericSuperclass);
getComponentType(interfaceTypes[0]);
</code></pre><p>  getComponentType方法的具体实现：</p>
<pre><code>private Class&lt;?&gt; getComponentType(Type type) {
    Class&lt;?&gt; componentType = null;
    if (type instanceof ParameterizedType) {
        // getActualTypeArguments()返回表示此类型实际类型参数的 Type 对象的数组。
        Type[] actualTypeArguments = ((ParameterizedType) type).getActualTypeArguments();
        if (actualTypeArguments != null &amp;&amp; actualTypeArguments.length &gt; 0) {
            componentType = (Class&lt;?&gt;) actualTypeArguments[0];
        }
    } else if (type instanceof GenericArrayType) {
        // 表示一种元素类型是参数化类型或者类型变量的数组类型
        componentType = (Class&lt;?&gt;) ((GenericArrayType) type).getGenericComponentType();
    } else {
        componentType = (Class&lt;?&gt;) type;
    }
    return componentType;
}
</code></pre><p>4.通过反射机制获取注解信息：</p>
<pre><code>try

{
    // 获取类中的所有方法
    Method method = class1.getDeclaredMethod();
    Annotation[] annotations1 = method.getAnnotations();// 获取所有的方法注解信息
    Annotation annotation1 = method.getAnnotation(RouterUri.class);// 获取指定的注解信息
    TypeVariable[] typeVariables1 = method.getTypeParameters();
    Annotation[][] parameterAnnotationsArray = method.getParameterAnnotations();// 拿到所有参数注解信息
    Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();// 获取所有参数class类型
    Type[] genericParameterTypes = method.getGenericParameterTypes();// 获取所有参数的type类型
    Class&lt;?&gt; returnType = method.getReturnType();// 获取方法的返回类型
    int modifiers = method.getModifiers();// 获取方法的访问权限
}catch(NoSuchMethodException e)
{
    e.printStackTrace();
}
</code></pre><p>5.Android反编译中的应用：</p>
<p>  例如有些应用为了防止做了二次打包签名校验，那我们如何进行二次打包呢？</p>
<blockquote>
<p>获取应用的签名方法是固定的：getPackageManager().getPackageInfo(getPackageName(), 64).signatures，我们可以直接修改应用的Application信息，通过反射机制，把校验对象的字符串内容设置到signatures中，说白了就是用反射来修改应用的签名信息，这样在应用中所有获取签名的地方都是我们设置的指定签名值，也就是比对的那个常量字符串内容，所有的签名校验方法都是返回true了。</p>
</blockquote>
<p>6.Android应用安全中的应用：</p>
<p>  例如Android在做签名校验防止二次打包时，绕过应用层的校验（花点心思就能破解了）。</p>
<blockquote>
<p>可以做的更安全点，就是在native层用反射调用系统获取签名的方法，然后直接在native层进行比较，如果发现签名不正确，就退出程序，全部放在native层做，这样安全系数会高点。</p>
</blockquote>
<p><strong>反射机制的优缺点：</strong></p>
<ul>
<li>优点：<br>运行期类型的判断，动态类加载，动态代理使用反射。</li>
<li>缺点：<br>性能是一个问题（特别是在手机这种低性能的机器上），反射相当于一系列解释操作，通知jvm要做的事情，性能比直接的java代码要慢很多。</li>
</ul>
<p><strong>总结：</strong></p>
<p>Java的反射机制在平时的业务开发过程中很少使用到，但是在一些基础框架（例如EventBus，Retrofit，Gson，Xposed）的搭建上应用非常广泛，今天简单的总结学习了一下，还有很多未知的知识等以后用到再做补充。</p>
<blockquote>
<p> 欢迎关注我的微信公众号 BugsDeveloper，第一时间获取文章更新以及更多原创干货分享！</p>
<p>   <img src="http://i.imgur.com/dOUqOLG.jpg" alt=""></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;反射简介：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;官方定义：反射主要是指程序可以访问、检测和修改它本身状态或行为的一种能力。在计算机科学领域，反射是一类应用，它们能够自描述和自控制。这类应用通过某种机制来实现对自己行为的描述和检测，并能根据自身行为的状态和结果，调
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Reflection" scheme="http://yoursite.com/tags/Reflection/"/>
    
  </entry>
  
  <entry>
    <title>SeanDong&#39;s 2017</title>
    <link href="http://yoursite.com/2017/02/06/SeanDong&#39;s%202017/"/>
    <id>http://yoursite.com/2017/02/06/SeanDong&#39;s 2017/</id>
    <published>2017-02-06T08:13:30.000Z</published>
    <updated>2017-02-15T10:28:27.150Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p>
<p>2017年（开工）的第一篇博客，也是用Github Pages写的第一篇博客。也算是换种方式和风格来写博客，之前博客都是在CSDN写，风格就像记笔记一样，内容也是大杂烩，google一搜一大把。之前CSDN写的博客就让它自生自灭吧。</p>
<p><strong>回顾2016</strong></p>
<p>2016年7月正式踏入社会，带着对未来的憧憬南下深圳，第一份工作很顺利，但也很坑，一家上市公司的分公司，入职后发现居然类似于外包公司，做完一个项目就say goodbye了，第二份工作找的比较认真，最后一家做大数据的初创公司吸引了我，我的职责是开发一款强大的数据采集App兼Android逆向开发和App破解。</p>
<blockquote>
<p>2016的遗憾：</p>
</blockquote>
<p>错过了校招，但是金子总会发光；没有处理好生活和工作的关系，2017加以改正；没有一场说走就走的旅行。</p>
<p><strong>展望2017</strong></p>
<blockquote>
<p>博客：</p>
</blockquote>
<p>认真对待博客，运营一个微信公众号。微信文章，个人博客同步更新，每周一更，文章争取全部原创，文章内容主要为以下几点：</p>
<ul>
<li>技术要点为google搜索不到或者不全</li>
<li>主要为Android相关的技术文章</li>
<li>自己开发中的一些经验的分享</li>
<li>一些好的资源的推荐</li>
</ul>
<blockquote>
<p>工作：</p>
</blockquote>
<p>全身心投入工作中，学会一日三省；写出star 200+的开源项目；撸定python；多总结，交流。</p>
<blockquote>
<p>生活：</p>
</blockquote>
<p>一周不少于三次健身；至少一场旅游；学会处理生活琐事。</p>
<blockquote>
<p>最最最重要的：</p>
</blockquote>
<p>认认真真经营好和我女朋友的感情。              </p>
<blockquote>
<p> 欢迎关注我的微信公众号 BugsDeveloper，第一时间获取文章更新以及更多原创干货分享！</p>
<p>   <img src="http://i.imgur.com/dOUqOLG.jpg" alt=""></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2017年（开工）的第一篇博客，也是用Github Pages写的第一篇博客。也算是换种方式和风格来写博客，之前博客都是在CSDN写，风格就像记笔记一样，内容也是大杂烩，google一搜一大把。之前CSDN写的博客就让它
    
    </summary>
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
    
      <category term="plan" scheme="http://yoursite.com/tags/plan/"/>
    
  </entry>
  
</feed>
